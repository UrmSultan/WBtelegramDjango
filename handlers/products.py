from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery


import database
from handlers.navigation import generate_products_keyboard
from keyboards import auth_keyboard
from api import get_all_products
from handlers.storage import (
    user_products,
    user_page,
    user_all_products,
    user_categories
)

router = Router()


@router.message(lambda message: message.text == "üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def choose_product(message: Message):
    user_id = message.from_user.id

    wb_token = database.get_user_token(user_id)
    if not wb_token:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",reply_markup=auth_keyboard())
        return

    products = await get_all_products(wb_token)
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

    if not products:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Wildberries.")
        return

    user_products[user_id] = products

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search")],
            [InlineKeyboardButton(text="üîçüìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all")]
        ]
    )

    await message.answer("üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data == "show_all")
async def show_all_products(call: CallbackQuery):
    user_id = call.from_user.id

    wb_token = database.get_user_token(user_id)
    if not wb_token:
        await call.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    all_products = user_products.get(user_id, [])
    if not all_products:
        await call.message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç (–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ).")
        await call.answer()
        return


    print(f"üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    from collections import defaultdict
    categories_dict = defaultdict(list)
    for p in all_products:
        category=p.get("subjectName","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        categories_dict[category].append(p)


    user_all_products[user_id] = all_products
    user_categories[user_id] = categories_dict

    keyboard_buttons = []

    for cat_name in user_categories[user_id].keys():
        cb_data = f"cat_{cat_name.replace(' ','_')}"
        keyboard_buttons.append([
            InlineKeyboardButton(text=cat_name, callback_data=cb_data)
        ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üîçüìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
            callback_data="show_entire_list"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ:",
        reply_markup=keyboard
    )
    await call.answer()

@router.callback_query(lambda call: call.data.startswith("cat_"))
async def show_category_products(call: CallbackQuery):
    user_id = call.from_user.id
    raw_cat = call.data.removeprefix("cat_")
    cat_name = raw_cat.replace('_',' ')

    categories = user_categories.get(user_id, {})
    if cat_name not in categories:
        await call.message.answer("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
        await call.answer()
        return

    cat_products = categories[cat_name]
    if not cat_products:
        await call.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await call.answer()
        return

    user_products[user_id] = cat_products
    user_page[user_id] = 0
    keyboard = generate_products_keyboard(cat_products,0)
    await call.message.edit_text(
        f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_name}",
        reply_markup=keyboard
    )
    await call.answer()


@router.callback_query(lambda call: call.data == "show_entire_list")
async def show_entire_list(call: CallbackQuery):
    user_id = call.from_user.id

    all_products = user_products.get(user_id,[])
    if not all_products:
        await call.message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        await call.answer()
        return

    user_products[user_id] = all_products
    user_page[user_id] = 0

    keyboard = generate_products_keyboard(all_products, 0)
    await call.message.edit_text("–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)
    await call.answer()