from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import database
from keyboards.reply import auth_keyboard
from utils.parse_product import parse_characteristic
from api.products import get_wb_products

router = Router()

user_products = {}

# States for search query
class SearchState(StatesGroup):
    waiting_for_query = State()


@router.message(lambda message: message.text == "üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def choose_product(message: Message):
    user_id = message.from_user.id
    wb_token = database.get_user_token(user_id)

    if not wb_token:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'",
            reply_markup=auth_keyboard()
        )
        return

    products = await get_wb_products(wb_token)

    if not products:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Wildberries.")
        return

    user_products[user_id] = products

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search")],
            [InlineKeyboardButton(text="üîçüìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all")]
        ]
    )

    await message.answer("üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard)

@router.callback_query(lambda call: call.data.startswith("product_"))
async def callback_product(call:CallbackQuery):
    user_id = call.from_user.id
    nm_id = call.data.removeprefix("product_")

    products = user_products.get(user_id,[])
    products = next((p for p in products if str(p["nmID"]) == nm_id), None)

    if not products:
        await call.message.answer("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫—ç—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await call.answer()
        return

    sizes = products.get("sizes",[])
    if not sizes:
        await call.message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤.")
        await call.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=size.get("techSize", "NoSize"),
                    callback_data=f"size_{nm_id}_{size['chrtID']}_{size['skus'][0]}"
                )
            ]
            for size in sizes if size.get("skus")
        ]
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=keyboard)
    await call.answer()

@router.callback_query(lambda call: call.data == "search")
async def start_search(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(SearchState.waiting_for_query)
    await call.answer()

@router.message(SearchState.waiting_for_query)
async def process_search(message: Message, state: FSMContext):
    user_id = message.from_user.id
    query = message.text.lower()

    products = user_products.get(user_id,[])

    filtered_products = [
        p for p in products if
        query in p.get("title", "").lower() or
        query in p.get("vendorCode", "").lower() or
        query in parse_characteristic(p, "–¶–≤–µ—Ç").lower()
    ]

    if not filtered_products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{p.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} / {parse_characteristic(p, '–¶–≤–µ—Ç')}",
                callback_data=f"product_{p['nmID']}"
            )] for p in filtered_products[:10]
        ]
    )
    await message.answer("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda call: call.data == "show_all")
async def show_all_products(call: CallbackQuery):
    user_id = call.from_user.id
    products = user_products.get(user_id,[])

    if not products:
        await call.message.answer("‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        await call.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{p.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} / {parse_characteristic(p, '–¶–≤–µ—Ç')}",
                callback_data=f"product_{p['nmID']}"
            )] for p in products[:10]
        ]
    )

    await call.message.answer("üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard)
    await call.answer()